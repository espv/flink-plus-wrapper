Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 313d14835e8e69e1dab3aafbac7cf80a)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: a048cf903f978db83c671168b1cecfeb)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: f8a21e7c23ad19ff4ca4e6effe932481)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: e2affc6431e170f6b6587cb6e4187cf8)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/2
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: aded80ebe5383d08461f637a80a26edc)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 75cd8e7c32f629108b4e2e5980ee4d36)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: ed4932bc6983ee8ddc852cf95a29f264)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 196f72e4bfcdd43ae049c067d483a344)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 1c24741382bdecae8fbbbb2868fe9103)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/2
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: d54b866cd2eac87185177d8da9ceaa94)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: fe216b01ee4416e679fc9251550cad39)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/2
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 7e4dbd09b2a4fdbe1ae7ed01833d9a71)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 91f3c72ba74ca124514b9b6d2dbd69dd)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/2
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 063106229b008d9ceb53042dd59fe876)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/1
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
java.io.FileNotFoundException: /home/espen/outputFromFlink.txt (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at java.io.FileReader.<init>(FileReader.java:58)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:663)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)

------------------------------------------------------------
 The program finished with the following exception:

org.apache.flink.client.program.ProgramInvocationException: The main method caused an error: null
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:593)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.lang.NullPointerException
	at java.io.Reader.<init>(Reader.java:78)
	at java.io.BufferedReader.<init>(BufferedReader.java:101)
	at java.io.BufferedReader.<init>(BufferedReader.java:116)
	at org.apache.flink.experiments.FlinkExperimentFramework.RetEndOfStream(FlinkExperimentFramework.java:667)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:206)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:759)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	... 9 more
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 4e13b113a0e72166939b026f545554c2)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/2
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at java.net.Socket.connect(Socket.java:556)
	at java.net.Socket.<init>(Socket.java:452)
	at java.net.Socket.<init>(Socket.java:229)
	at no.uio.ifi.SpeComm.ConnectToCoordinator(SpeComm.java:86)
	at no.uio.ifi.SpeComm.<init>(SpeComm.java:77)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:763)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 607b238978414b3bb50c38a218432346)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/2
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: d27cca366f3eaee0d1c1e873d396eb25)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph.
	at org.apache.flink.client.program.rest.RestClusterClient.lambda$submitJob$8(RestClusterClient.java:382)
	at java.util.concurrent.CompletableFuture.uniExceptionally(CompletableFuture.java:884)
	at java.util.concurrent.CompletableFuture$UniExceptionally.tryFire(CompletableFuture.java:866)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:276)
	at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)
	at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$1(RestClient.java:341)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:511)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:504)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:483)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:424)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:121)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:343)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:591)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:508)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:470)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	... 1 more
Caused by: org.apache.flink.runtime.concurrent.FutureUtils$RetryException: Could not complete the operation. Number of retries has been exhausted.
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:273)
	... 18 more
Caused by: java.util.concurrent.CompletionException: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:957)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	... 16 more
Caused by: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:714)
	at org.apache.flink.shaded.netty4.io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:340)
	... 6 more
Caused by: java.net.ConnectException: Connection refused
	... 10 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: db861725d9d61b8fea34b600c453fe62)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobExecutionException: Job execution failed.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Caused by: java.nio.file.FileAlreadyExistsException: File already exists: /home/espen/outputFromFlink.txt/2
	at org.apache.flink.core.fs.local.LocalFileSystem.create(LocalFileSystem.java:264)
	at org.apache.flink.core.fs.SafetyNetWrapperFileSystem.create(SafetyNetWrapperFileSystem.java:126)
	at org.apache.flink.api.common.io.FileOutputFormat.open(FileOutputFormat.java:248)
	at org.apache.flink.api.java.io.TextOutputFormat.open(TextOutputFormat.java:88)
	at org.apache.flink.streaming.api.functions.sink.OutputFormatSinkFunction.open(OutputFormatSinkFunction.java:65)
	at org.apache.flink.api.common.functions.util.FunctionUtils.openFunction(FunctionUtils.java:36)
	at org.apache.flink.streaming.api.operators.AbstractUdfStreamOperator.open(AbstractUdfStreamOperator.java:102)
	at org.apache.flink.streaming.api.operators.StreamSink.open(StreamSink.java:48)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.openAllOperators(StreamTask.java:532)
	at org.apache.flink.streaming.runtime.tasks.StreamTask.invoke(StreamTask.java:396)
	at org.apache.flink.runtime.taskmanager.Task.doRun(Task.java:705)
	at org.apache.flink.runtime.taskmanager.Task.run(Task.java:530)
	... 1 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: f455ca6f3ff201b9c9837131c69b17a2)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.rest.util.RestClientException: [org.apache.flink.runtime.messages.FlinkJobNotFoundException: Could not find Flink job (f455ca6f3ff201b9c9837131c69b17a2)]
	at org.apache.flink.runtime.rest.RestClient.parseResponse(RestClient.java:389)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$3(RestClient.java:373)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:966)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	... 1 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0x7) at pc=0x00007f674c0f0e10, pid=18047, tid=0x00007f67241bd700
#
# JRE version: OpenJDK Runtime Environment (8.0_242-b08) (build 1.8.0_242-8u242-b08-0ubuntu3~18.04-b08)
# Java VM: OpenJDK 64-Bit Server VM (25.242-b08 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# C  [libzip.so+0x4e10]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# /home/espen/Tools/flink-1.9.1/hs_err_pid18047.log
Compiled method (nm)  300798   78     n 0       java.util.zip.ZipFile::getEntry (native)
 total in heap  [0x00007f6739132010,0x00007f6739132380] = 880
 relocation     [0x00007f6739132138,0x00007f6739132180] = 72
 main code      [0x00007f6739132180,0x00007f6739132380] = 512
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 1f3cf063cfd9d59215403ca2064f5841)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.rest.util.RestClientException: [org.apache.flink.runtime.messages.FlinkJobNotFoundException: Could not find Flink job (1f3cf063cfd9d59215403ca2064f5841)]
	at org.apache.flink.runtime.rest.RestClient.parseResponse(RestClient.java:389)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$3(RestClient.java:373)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:966)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	... 1 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: d1f811f1c5287fdc0edead763e2da2fd)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.rest.util.RestClientException: [org.apache.flink.runtime.messages.FlinkJobNotFoundException: Could not find Flink job (d1f811f1c5287fdc0edead763e2da2fd)]
	at org.apache.flink.runtime.rest.RestClient.parseResponse(RestClient.java:389)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$3(RestClient.java:373)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:966)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	... 1 more
Stopping the execution environment
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0x7) at pc=0x00007f724f9cfe10, pid=30198, tid=0x00007f722c159700
#
# JRE version: OpenJDK Runtime Environment (8.0_242-b08) (build 1.8.0_242-8u242-b08-0ubuntu3~18.04-b08)
# Java VM: OpenJDK 64-Bit Server VM (25.242-b08 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# C  [libzip.so+0x4e10]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# /home/espen/Tools/flink-1.9.1/hs_err_pid30198.log
Compiled method (nm)  301046   81     n 0       java.util.zip.ZipFile::getEntry (native)
 total in heap  [0x00007f7240b00150,0x00007f7240b004c0] = 880
 relocation     [0x00007f7240b00278,0x00007f7240b002c0] = 72
 main code      [0x00007f7240b002c0,0x00007f7240b004c0] = 512
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 3d6f347968f81c36ce9aea3f9686d112)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph.
	at org.apache.flink.client.program.rest.RestClusterClient.lambda$submitJob$8(RestClusterClient.java:382)
	at java.util.concurrent.CompletableFuture.uniExceptionally(CompletableFuture.java:884)
	at java.util.concurrent.CompletableFuture$UniExceptionally.tryFire(CompletableFuture.java:866)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:276)
	at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)
	at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$1(RestClient.java:341)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:511)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:504)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:483)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:424)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:121)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:343)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:591)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:508)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:470)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	... 1 more
Caused by: org.apache.flink.runtime.concurrent.FutureUtils$RetryException: Could not complete the operation. Number of retries has been exhausted.
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:273)
	... 18 more
Caused by: java.util.concurrent.CompletionException: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:957)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	... 16 more
Caused by: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:714)
	at org.apache.flink.shaded.netty4.io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:340)
	... 6 more
Caused by: java.net.ConnectException: Connection refused
	... 10 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at java.net.Socket.connect(Socket.java:556)
	at java.net.Socket.<init>(Socket.java:452)
	at java.net.Socket.<init>(Socket.java:229)
	at no.uio.ifi.SpeComm.ConnectToCoordinator(SpeComm.java:86)
	at no.uio.ifi.SpeComm.<init>(SpeComm.java:77)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:763)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
SETUP
SETUP2
SETUP3
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 143cb6bc7364e05054a1a95889eb6c12)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:520)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.rest.util.RestClientException: [org.apache.flink.runtime.messages.FlinkJobNotFoundException: Could not find Flink job (143cb6bc7364e05054a1a95889eb6c12)]
	at org.apache.flink.runtime.rest.RestClient.parseResponse(RestClient.java:389)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$3(RestClient.java:373)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:966)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	... 1 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 28fe670c5088b59f2e874f3536c7ba9a)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.rest.util.RestClientException: [org.apache.flink.runtime.messages.FlinkJobNotFoundException: Could not find Flink job (28fe670c5088b59f2e874f3536c7ba9a)]
	at org.apache.flink.runtime.rest.RestClient.parseResponse(RestClient.java:389)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$3(RestClient.java:373)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:966)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	... 1 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at java.net.Socket.connect(Socket.java:556)
	at java.net.Socket.<init>(Socket.java:452)
	at java.net.Socket.<init>(Socket.java:229)
	at no.uio.ifi.SpeComm.ConnectToCoordinator(SpeComm.java:86)
	at no.uio.ifi.SpeComm.<init>(SpeComm.java:77)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:750)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at java.net.Socket.connect(Socket.java:556)
	at java.net.Socket.<init>(Socket.java:452)
	at java.net.Socket.<init>(Socket.java:229)
	at no.uio.ifi.SpeComm.ConnectToCoordinator(SpeComm.java:86)
	at no.uio.ifi.SpeComm.<init>(SpeComm.java:77)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:750)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: f3953afecc27c24d44ce02495f81cb6b)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.rest.util.RestClientException: [org.apache.flink.runtime.messages.FlinkJobNotFoundException: Could not find Flink job (f3953afecc27c24d44ce02495f81cb6b)]
	at org.apache.flink.runtime.rest.RestClient.parseResponse(RestClient.java:389)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$3(RestClient.java:373)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:966)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	... 1 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGBUS (0x7) at pc=0x00007f7e88c6be10, pid=31809, tid=0x00007f7e3532c700
#
# JRE version: OpenJDK Runtime Environment (8.0_242-b08) (build 1.8.0_242-8u242-b08-0ubuntu3~18.04-b08)
# Java VM: OpenJDK 64-Bit Server VM (25.242-b08 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# C  [libzip.so+0x4e10]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# /home/espen/Tools/flink-1.9.1/hs_err_pid31809.log
Compiled method (nm)  300752   76     n 0       java.util.zip.ZipFile::getEntry (native)
 total in heap  [0x00007f7e75131310,0x00007f7e75131680] = 880
 relocation     [0x00007f7e75131438,0x00007f7e75131480] = 72
 main code      [0x00007f7e75131480,0x00007f7e75131680] = 512
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: fc46e91c36294fca355f77c5f10253f7)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)#
# A fatal error has been detected by the Java Runtime Environment:
#
#  
SIGBUS (0x7) at pc=0x00007f4b78845e10, pid=25731, tid=0x00007f4b7bfdf700
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)#
# JRE version: OpenJDK Runtime Environment (8.0_242-b08) (build 1.8.0_242-8u242-b08-0ubuntu3~18.04-b08)

# Java VM: OpenJDK 64-Bit Server VM (25.242-b08 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# 	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)C
  [libzip.so+0x4e10]	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)

#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
	at java.lang.Thread.run(Thread.java:748)
# An error report file with more information is saved as:
# /home/espen/Tools/flink-1.9.1/hs_err_pid25731.log
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at java.net.Socket.connect(Socket.java:556)
	at java.net.Socket.<init>(Socket.java:452)
	at java.net.Socket.<init>(Socket.java:229)
	at no.uio.ifi.SpeComm.ConnectToCoordinator(SpeComm.java:86)
	at no.uio.ifi.SpeComm.<init>(SpeComm.java:77)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:721)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
java.lang.NullPointerException
	at java.io.StringReader.<init>(StringReader.java:50)
	at org.yaml.snakeyaml.reader.StreamReader.<init>(StreamReader.java:63)
	at org.yaml.snakeyaml.Yaml.load(Yaml.java:438)
	at no.uio.ifi.Comm.receiveMap(Comm.java:16)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:113)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:725)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 339a81c37e85f24da2567b8baf677ad7)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
ds.addSink(regularSinkFunctions.get(stream_id));
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-65185464064167-d2aeff0b-2314-4f95-8bfe-3dee1cf5f5b8.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at java.net.Socket.connect(Socket.java:556)
	at java.net.Socket.<init>(Socket.java:452)
	at java.net.Socket.<init>(Socket.java:229)
	at no.uio.ifi.SpeComm.ConnectToCoordinator(SpeComm.java:86)
	at no.uio.ifi.SpeComm.<init>(SpeComm.java:77)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:721)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 2469fe61bbb9ae4ce76047dcc9adefc0)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
ds.addSink(regularSinkFunctions.get(stream_id));Caused by: java.lang.InterruptedException

	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-65409712602491-db7fdd13-da73-4d40-ac47-c1695052daf5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: ff80d3de07104a0e33fe4e74e44f5f96)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-65409712602491-db7fdd13-da73-4d40-ac47-c1695052daf5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=RetEndOfStream, arguments=[1000]}
org.apache.flink.client.program.ProgramInvocationException: Job failed. (JobID: 8a18600eb71899a29384133ab53d0f01)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:262)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobCancellationException: Job was cancelled.
	at org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:148)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:259)
	... 6 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at java.net.Socket.connect(Socket.java:556)
	at java.net.Socket.<init>(Socket.java:452)
	at java.net.Socket.<init>(Socket.java:229)
	at no.uio.ifi.SpeComm.ConnectToCoordinator(SpeComm.java:86)
	at no.uio.ifi.SpeComm.<init>(SpeComm.java:77)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:726)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
java.lang.NullPointerException
	at java.io.StringReader.<init>(StringReader.java:50)
	at org.yaml.snakeyaml.reader.StreamReader.<init>(StreamReader.java:63)
	at org.yaml.snakeyaml.Yaml.load(Yaml.java:438)
	at no.uio.ifi.Comm.receiveMap(Comm.java:16)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:113)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:730)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 84e8e42e43819b11600e472044310f65)
ds.addSink(regularSinkFunctions.get(stream_id));	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)

	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-69986851121007-0d69b74c-46c8-48ab-a1fc-e1fede1eb588.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
java.lang.NullPointerException
	at java.io.StringReader.<init>(StringReader.java:50)
	at org.yaml.snakeyaml.reader.StreamReader.<init>(StreamReader.java:63)
	at org.yaml.snakeyaml.Yaml.load(Yaml.java:438)
	at no.uio.ifi.Comm.receiveMap(Comm.java:16)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:113)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:730)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at java.net.Socket.connect(Socket.java:556)
	at java.net.Socket.<init>(Socket.java:452)
	at java.net.Socket.<init>(Socket.java:229)
	at no.uio.ifi.SpeComm.ConnectToCoordinator(SpeComm.java:86)
	at no.uio.ifi.SpeComm.<init>(SpeComm.java:77)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:726)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 4ab18f34d7e41f2834dbeff4dc2a51e4)ds.addSink(regularSinkFunctions.get(stream_id));

	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70353762895251-2ebff72f-f064-4392-a2e7-c7eccf0df4eb.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
java.lang.NullPointerException
	at java.io.StringReader.<init>(StringReader.java:50)
	at org.yaml.snakeyaml.reader.StreamReader.<init>(StreamReader.java:63)
	at org.yaml.snakeyaml.Yaml.load(Yaml.java:438)
	at no.uio.ifi.Comm.receiveMap(Comm.java:16)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:113)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:730)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
java.lang.NullPointerException
	at java.io.StringReader.<init>(StringReader.java:50)
	at org.yaml.snakeyaml.reader.StreamReader.<init>(StreamReader.java:63)
	at org.yaml.snakeyaml.Yaml.load(Yaml.java:438)
	at no.uio.ifi.Comm.receiveMap(Comm.java:16)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:113)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:730)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: a8fd8c95f26845250ec32ea8c0882b59)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
ds.addSink(regularSinkFunctions.get(stream_id));	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)

	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70738115516608-69999d70-9c4a-4358-bf05-85160a444ed5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: b77745d6910507fd30ab9639c6c2c167)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70738115516608-69999d70-9c4a-4358-bf05-85160a444ed5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: bdd31fcaa8c89a0b46218d2fc33c65b6)ds.addSink(regularSinkFunctions.get(stream_id));

	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70738115516608-69999d70-9c4a-4358-bf05-85160a444ed5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 2573dc3eb31ebd667d91d40b7dc9ea2a)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70738115516608-69999d70-9c4a-4358-bf05-85160a444ed5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 10c9c996ef5ba04f4eb3b3e973403f69)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70738115516608-69999d70-9c4a-4358-bf05-85160a444ed5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 4d84190925e6be501fedc57be3997d23)

	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70738115516608-69999d70-9c4a-4358-bf05-85160a444ed5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: e20c9f3dc866a2cc3d1846d02e737056)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70738115516608-69999d70-9c4a-4358-bf05-85160a444ed5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 9108a0a5b24568ccb72a350423ebc022)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70738115516608-69999d70-9c4a-4358-bf05-85160a444ed5.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 557a1afa31dc7e957841a29299915f61)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more

ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-70738115516608-69999d70-9c4a-4358-bf05-85160a444ed5.trace
Before return "Success"
Stopping the execution environment
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
java.lang.NullPointerException
	at java.io.StringReader.<init>(StringReader.java:50)
	at org.yaml.snakeyaml.reader.StreamReader.<init>(StreamReader.java:63)
	at org.yaml.snakeyaml.Yaml.load(Yaml.java:438)
	at no.uio.ifi.Comm.receiveMap(Comm.java:16)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:113)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:730)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
java.lang.NullPointerException
	at java.io.StringReader.<init>(StringReader.java:50)
	at org.yaml.snakeyaml.reader.StreamReader.<init>(StreamReader.java:63)
	at org.yaml.snakeyaml.Yaml.load(Yaml.java:438)
	at no.uio.ifi.Comm.receiveMap(Comm.java:16)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:113)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:731)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 5c16b9cff31c981474b7fe449d3e3137)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
ds.addSink(regularSinkFunctions.get(stream_id));	at java.lang.Thread.run(Thread.java:748)

Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 890920639e880de708f91802f2f76e76)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 7c4af58ffb8d30d56e9b2ebaa098e629)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 177c94ccae13a2b86e7499666c76572c)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 95c7e61ca1707d0afe5cfb04b490aa56)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 3c15d28743f1f186f7d33d5d4b6b62b1)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 58227721fa45530c8336f06d09492519)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: d9dd2187217732dacc892038586a1655)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 37c94b4213f08dd766601de70ffa15eb)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 1c0ee48f92354e8a946f6821e39df6c2)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=EndExperiment, administrative=true, ack=false}
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71011646805060-1d1ae1ee-2cb0-44f8-a028-766d3084ba56.trace
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: a20a7ae419825c87bda9b58709a9227d)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph.
	at org.apache.flink.client.program.rest.RestClusterClient.lambda$submitJob$8(RestClusterClient.java:382)
	at java.util.concurrent.CompletableFuture.uniExceptionally(CompletableFuture.java:884)
	at java.util.concurrent.CompletableFuture$UniExceptionally.tryFire(CompletableFuture.java:866)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:276)
	at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)
	at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$1(RestClient.java:341)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:511)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:504)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:483)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:424)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:121)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:343)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:591)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:508)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:470)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	... 1 more
Caused by: org.apache.flink.runtime.concurrent.FutureUtils$RetryException: Could not complete the operation. Number of retries has been exhausted.
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:273)
	... 18 more
Caused by: java.util.concurrent.CompletionException: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:957)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	... 16 more
Caused by: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:714)
	at org.apache.flink.shaded.netty4.io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:340)
	... 6 more
Caused by: java.net.ConnectException: Connection refused
	... 10 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 74d925f13e8a7b97482d86751f659f44)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
ds.addSink(regularSinkFunctions.get(stream_id));Caused by: java.lang.InterruptedException

	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: fc9c8194fe8008b9c82fe38f0d6b2afc)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
ds.addSink(regularSinkFunctions.get(stream_id));
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 2f3bf4e0cbb010ff44a2898d7a963301)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 5fc11a933f850aac263d13b51ff984d2)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 28fe661ff4e5b53006fdd052c965a164)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: bb1524b060485cb9564306fb748a7619)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 6f413be8f2e0fd70a2621f5c076dee7a)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: a7b8178491714b729ec4d12ba17d256e)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 51eec7303565a9a86150393adf03e1b8)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: cfab271663e7e3ba7451e67c5654a760)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=EndExperiment, administrative=true, ack=false}
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-71823204513678-07dd2a3d-6f5d-452f-804a-3fff5439df3c.trace
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 88d5f02e496c75bd4f05cfaa446e1cc8)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72259307422273-c47d7b05-903a-4dca-a466-0b83de9fc8ab.trace
Before return "Success"
java.io.IOException: Cannot run program "/home/espen/Research/PhD/Private-WIP/SPEs/flink-wip/flink-1.9.1/bin/cancel-jobs": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:621)
	at java.lang.Runtime.exec(Runtime.java:451)
	at java.lang.Runtime.exec(Runtime.java:348)
	at org.apache.flink.experiments.FlinkExperimentFramework.StopRuntimeEnv(FlinkExperimentFramework.java:567)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:196)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 21 more
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 5894f40b18dc806cf241beb43c448a30)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72259307422273-c47d7b05-903a-4dca-a466-0b83de9fc8ab.trace
Before return "Success"
java.io.IOException: Cannot run program "/home/espen/Research/PhD/Private-WIP/SPEs/flink-wip/flink-1.9.1/bin/cancel-jobs": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:621)
	at java.lang.Runtime.exec(Runtime.java:451)
	at java.lang.Runtime.exec(Runtime.java:348)
	at org.apache.flink.experiments.FlinkExperimentFramework.StopRuntimeEnv(FlinkExperimentFramework.java:567)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:196)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 21 more
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: d9f1fdffebd86ad9feb1fa5fe65de34b)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72259307422273-c47d7b05-903a-4dca-a466-0b83de9fc8ab.trace
Before return "Success"
java.io.IOException: Cannot run program "/home/espen/Research/PhD/Private-WIP/SPEs/flink-wip/flink-1.9.1/bin/cancel-jobs": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:621)
	at java.lang.Runtime.exec(Runtime.java:451)
	at java.lang.Runtime.exec(Runtime.java:348)
	at org.apache.flink.experiments.FlinkExperimentFramework.StopRuntimeEnv(FlinkExperimentFramework.java:567)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:196)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 21 more
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 883cd8baf51d86a9ac408dd7e219a3ab)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72259307422273-c47d7b05-903a-4dca-a466-0b83de9fc8ab.trace
Before return "Success"
java.io.IOException: Cannot run program "/home/espen/Research/PhD/Private-WIP/SPEs/flink-wip/flink-1.9.1/bin/cancel-jobs": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:621)
	at java.lang.Runtime.exec(Runtime.java:451)
	at java.lang.Runtime.exec(Runtime.java:348)
	at org.apache.flink.experiments.FlinkExperimentFramework.StopRuntimeEnv(FlinkExperimentFramework.java:567)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:196)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 21 more
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 30befee58987f221e6d6ebbb8d9d9821)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72259307422273-c47d7b05-903a-4dca-a466-0b83de9fc8ab.trace
Before return "Success"
java.io.IOException: Cannot run program "/home/espen/Research/PhD/Private-WIP/SPEs/flink-wip/flink-1.9.1/bin/cancel-jobs": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:621)
	at java.lang.Runtime.exec(Runtime.java:451)
	at java.lang.Runtime.exec(Runtime.java:348)
	at org.apache.flink.experiments.FlinkExperimentFramework.StopRuntimeEnv(FlinkExperimentFramework.java:567)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:196)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 21 more
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 4a40f36abb87803ac628f6058350d36d)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72259307422273-c47d7b05-903a-4dca-a466-0b83de9fc8ab.trace
Before return "Success"
java.io.IOException: Cannot run program "/home/espen/Research/PhD/Private-WIP/SPEs/flink-wip/flink-1.9.1/bin/cancel-jobs": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:621)
	at java.lang.Runtime.exec(Runtime.java:451)
	at java.lang.Runtime.exec(Runtime.java:348)
	at org.apache.flink.experiments.FlinkExperimentFramework.StopRuntimeEnv(FlinkExperimentFramework.java:567)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:196)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 21 more
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: c539eff1ef1389e8ab86880f84934ef4)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72259307422273-c47d7b05-903a-4dca-a466-0b83de9fc8ab.trace
Before return "Success"
java.io.IOException: Cannot run program "/home/espen/Research/PhD/Private-WIP/SPEs/flink-wip/flink-1.9.1/bin/cancel-jobs": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:621)
	at java.lang.Runtime.exec(Runtime.java:451)
	at java.lang.Runtime.exec(Runtime.java:348)
	at org.apache.flink.experiments.FlinkExperimentFramework.StopRuntimeEnv(FlinkExperimentFramework.java:567)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:196)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 21 more
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 014a5687f392dde6ec8ab9f646cb1c34)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72259307422273-c47d7b05-903a-4dca-a466-0b83de9fc8ab.trace
Before return "Success"
java.io.IOException: Cannot run program "/home/espen/Research/PhD/Private-WIP/SPEs/flink-wip/flink-1.9.1/bin/cancel-jobs": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:621)
	at java.lang.Runtime.exec(Runtime.java:451)
	at java.lang.Runtime.exec(Runtime.java:348)
	at org.apache.flink.experiments.FlinkExperimentFramework.StopRuntimeEnv(FlinkExperimentFramework.java:567)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:196)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 21 more
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 6a037a9dd6f30726bdc11ce5df82fdf8)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72259307422273-c47d7b05-903a-4dca-a466-0b83de9fc8ab.trace
Before return "Success"
java.io.IOException: Cannot run program "/home/espen/Research/PhD/Private-WIP/SPEs/flink-wip/flink-1.9.1/bin/cancel-jobs": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:621)
	at java.lang.Runtime.exec(Runtime.java:451)
	at java.lang.Runtime.exec(Runtime.java:348)
	at org.apache.flink.experiments.FlinkExperimentFramework.StopRuntimeEnv(FlinkExperimentFramework.java:567)
	at no.uio.ifi.SpeComm.HandleEvent(SpeComm.java:196)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:120)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 21 more
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
java.net.SocketException: Broken pipe (Write failed)
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:134)
	at java.io.DataOutputStream.writeBytes(DataOutputStream.java:276)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:122)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 2620cb5c9918c62fad5e31b2c76b3580)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
ds.addSink(regularSinkFunctions.get(stream_id));	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)

	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 1d10eb39da8e8bf65c542b84a38d3289)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 30769adb00fe1f3ec100ae10b051aae6)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 5f1642c6187616656db3a6c815f513f3)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: ebf9a31a355d0a473d7650db7ba144cf)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: a88063347dfb263a4e343ac98fd155f4)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: b24957a2ef6e0dc8df7e9e0f72a6888a)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
ds.addSink(regularSinkFunctions.get(stream_id));
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 952d1a753efd1eaa1cc5c71da5b0bcea)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 1eae2df4958ce7a39e94be134b291d78)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 036e651b0179db763bd3921cd030eb8d)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=EndExperiment, administrative=true, ack=false}
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-72833068223344-b38bc878-d98d-4ca3-a3b0-f1426449294c.trace
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at java.net.Socket.connect(Socket.java:556)
	at java.net.Socket.<init>(Socket.java:452)
	at java.net.Socket.<init>(Socket.java:229)
	at no.uio.ifi.SpeComm.ConnectToCoordinator(SpeComm.java:86)
	at no.uio.ifi.SpeComm.<init>(SpeComm.java:77)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:731)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 91c4bfea4099ae4a3305571281660834)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.rest.util.RestClientException: [org.apache.flink.runtime.messages.FlinkJobNotFoundException: Could not find Flink job (91c4bfea4099ae4a3305571281660834)]
	at org.apache.flink.runtime.rest.RestClient.parseResponse(RestClient.java:389)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$3(RestClient.java:373)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:966)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:456)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	... 1 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: e1da66f6ea95789d95846d714e44f551)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph.
	at org.apache.flink.client.program.rest.RestClusterClient.lambda$submitJob$8(RestClusterClient.java:382)
	at java.util.concurrent.CompletableFuture.uniExceptionally(CompletableFuture.java:884)
	at java.util.concurrent.CompletableFuture$UniExceptionally.tryFire(CompletableFuture.java:866)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:276)
	at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)
	at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$1(RestClient.java:341)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:511)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:504)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:483)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:424)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:121)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:343)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:591)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:508)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:470)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	... 1 more
Caused by: org.apache.flink.runtime.concurrent.FutureUtils$RetryException: Could not complete the operation. Number of retries has been exhausted.
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:273)
	... 18 more
Caused by: java.util.concurrent.CompletionException: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:957)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	... 16 more
Caused by: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:714)
	at org.apache.flink.shaded.netty4.io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:340)
	... 6 more
Caused by: java.net.ConnectException: Connection refused
	... 10 more
Stopping the execution environment
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: f5985c7d0715ae913c8e832e82e656d8)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.flink.runtime.client.JobSubmissionException: Failed to submit JobGraph.
	at org.apache.flink.client.program.rest.RestClusterClient.lambda$submitJob$8(RestClusterClient.java:382)
	at java.util.concurrent.CompletableFuture.uniExceptionally(CompletableFuture.java:884)
	at java.util.concurrent.CompletableFuture$UniExceptionally.tryFire(CompletableFuture.java:866)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:276)
	at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)
	at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)
	at org.apache.flink.runtime.rest.RestClient.lambda$submitRequest$1(RestClient.java:341)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:511)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:504)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:483)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:424)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:121)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:343)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:591)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:508)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:470)
	at org.apache.flink.shaded.netty4.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)
	... 1 more
Caused by: org.apache.flink.runtime.concurrent.FutureUtils$RetryException: Could not complete the operation. Number of retries has been exhausted.
	at org.apache.flink.runtime.concurrent.FutureUtils.lambda$retryOperationWithDelay$8(FutureUtils.java:273)
	... 18 more
Caused by: java.util.concurrent.CompletionException: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:292)
	at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:308)
	at java.util.concurrent.CompletableFuture.uniCompose(CompletableFuture.java:957)
	at java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:940)
	... 16 more
Caused by: org.apache.flink.shaded.netty4.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:8081
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:714)
	at org.apache.flink.shaded.netty4.io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:327)
	at org.apache.flink.shaded.netty4.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:340)
	... 6 more
Caused by: java.net.ConnectException: Connection refused
	... 10 more
Stopping the execution environment
java.lang.NullPointerException
	at java.io.StringReader.<init>(StringReader.java:50)
	at org.yaml.snakeyaml.reader.StreamReader.<init>(StreamReader.java:63)
	at org.yaml.snakeyaml.Yaml.load(Yaml.java:438)
	at no.uio.ifi.Comm.receiveMap(Comm.java:16)
	at no.uio.ifi.SpeComm.AcceptTasks(SpeComm.java:113)
	at org.apache.flink.experiments.FlinkExperimentFramework.main(FlinkExperimentFramework.java:735)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.flink.client.program.PackagedProgram.callMainMethod(PackagedProgram.java:576)
	at org.apache.flink.client.program.PackagedProgram.invokeInteractiveModeForExecution(PackagedProgram.java:438)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:274)
	at org.apache.flink.client.cli.CliFrontend.executeProgram(CliFrontend.java:746)
	at org.apache.flink.client.cli.CliFrontend.runProgram(CliFrontend.java:273)
	at org.apache.flink.client.cli.CliFrontend.run(CliFrontend.java:205)
	at org.apache.flink.client.cli.CliFrontend.parseParameters(CliFrontend.java:1010)
	at org.apache.flink.client.cli.CliFrontend.lambda$main$10(CliFrontend.java:1083)
	at org.apache.flink.runtime.security.NoOpSecurityContext.runSecured(NoOpSecurityContext.java:30)
	at org.apache.flink.client.cli.CliFrontend.main(CliFrontend.java:1083)
log4j:WARN No appenders could be found for logger (org.apache.flink.client.cli.CliFrontend).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
Starting execution of program
Connecting to coordinator at ip localhost:50000
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}}]}
Before handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
After handling {task=AddTpIds, arguments=[0, 1, 100, 221, 200, 201, 202, 203]}
Before handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=t, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=ts, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
After handling {task=AddSchemas, arguments=[{id=9, stream-id=16, name=trafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=10, stream-id=23, name=outTrafficRouteStream, rowtime-column={column=t, nanoseconds-per-tick=1000000000}, timestamps=[{column=absTime, format=%Y-%m-%dT%H:%M:%SZ}], tuple-format=[{name=eventTime.rowtime, type=long-timestamp}, {name=lane, type=int}, {name=x, type=double}, {name=v, type=double}, {name=a, type=double}, {name=gap, type=double}, {name=dv, type=double}, {name=label, type=string}, {name=id, type=int}, {name=roadId, type=int}, {name=originId, type=int}, {name=absTime, type=string}, {name=xWithOffset, type=double}]}, {id=11, stream-id=24, name=averageSpeedStream, tuple-format=[{name=avgSpeed, type=double}, {name=label, type=string}, {name=roadId, type=int}]}, {id=12, stream-id=17, name=ValidLocationEvent, rowtime-column={column=ts, nanoseconds-per-tick=1000000000}, tuple-format=[{name=id, type=int}, {name=eventTime.rowtime, type=long-timestamp}, {name=road, type=int}, {name=speed, type=double}, {name=dist, type=double}, {name=lane, type=int}, {name=segmentId, type=int}]}]}
Before handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
After handling {task=SetNidToAddress, administrative=true, arguments=[{1={port=9092, ip=localhost}, 2={port=9092, ip=localhost}, 3={port=9092, ip=localhost}}]}
Before handling {task=Configure, administrative=true}
Subscribing to kafka topic trafficRouteStream-2
Subscribing to kafka topic ValidLocationEvent-2
Subscribing to kafka topic outTrafficRouteStream-2
Subscribing to kafka topic averageSpeedStream-2
After handling {task=Configure, administrative=true}
Before handling {task=AddNextHop, arguments=[23, 3]}
After handling {task=AddNextHop, arguments=[23, 3]}
Before handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
After handling {task=DeployQueries, arguments=[{name=traffic, id=12, output-stream-id=23, input-stream-ids=[16], type=fetch-query, print=true, sql-query={t-rex= Assign 16 => Traffic, 23 => OutTraffic Define  OutTraffic(t: float, lane: int, x: float, v: float, a: float, gap: float, dv: float, label: string, id: int, roadId: int, originId: int, absTime: string, xWithOffset: float) From   Traffic() Where t := Traffic.t, lane := Traffic.lane, x := Traffic.x, v := Traffic.v, a := Traffic.a, gap := Traffic.gap, dv := Traffic.dv, label := Traffic.label, id := Traffic.id, roadId := Traffic.roadId, originId := Traffic.originId, absTime := Traffic.absTime, xWithOffset := Traffic.xWithOffset Consuming Traffic; , siddhi=from trafficRouteStream select * insert into outTrafficRouteStream; , flink=SELECT * FROM trafficRouteStream , esper=insert into outTrafficRouteStream select * from trafficRouteStream; }}]}
Before handling {task=TraceTuple, arguments=[0, []]}
TraceTuple, tracepointId: 0, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[0, []]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 5914a5b3d0184f0219bd2321934318a5)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 6f10c65aba54707f87a7b5266dbeafdb)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: c25bd15f6307ac7eb98c727588443d6f)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: cb715a8b904679794b131d7e2117051a)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: 7476687e0d9e10b6619eb3448631a619)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: ef47682cafb90688c04ede802a294a37)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)ds.addSink(regularSinkFunctions.get(stream_id));

	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: be9aaa8fe23152bf4247e72df2595e78)
ds.addSink(regularSinkFunctions.get(stream_id));	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)

	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: aba6b8263351e669af4c5d711de9a922)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: f4aae429742388d82cc34a9a74d0f87d)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=StartRuntimeEnv}
After handling {task=StartRuntimeEnv}
Before handling {task=TraceTuple, arguments=[200, []]}
TraceTuple, tracepointId: 200, arguments: []
After tracing
After handling {task=TraceTuple, arguments=[200, []]}
Before handling {task=StopRuntimeEnv}
Before tf.traceEvent(101);
Before threadRunningEnvironment.interrupt();
Before threadRunningEnvironment.join();
Before for (int stream_id : streamIdToDataStream.keySet())
ds.addSink(regularSinkFunctions.get(stream_id));
org.apache.flink.client.program.ProgramInvocationException: Could not retrieve the execution result. (JobID: e2370aff24e0dbd200bbe1c51ec30bdd)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:255)
	at org.apache.flink.client.program.ClusterClient.run(ClusterClient.java:338)
	at org.apache.flink.streaming.api.environment.StreamContextEnvironment.execute(StreamContextEnvironment.java:60)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1507)
	at org.apache.flink.streaming.api.environment.StreamExecutionEnvironment.execute(StreamExecutionEnvironment.java:1489)
	at org.apache.flink.experiments.FlinkExperimentFramework.lambda$StartRuntimeEnv$0(FlinkExperimentFramework.java:518)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:347)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
	at org.apache.flink.client.program.rest.RestClusterClient.submitJob(RestClusterClient.java:252)
	... 6 more
Stopping the execution environment
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
ds.addSink(regularSinkFunctions.get(stream_id));
Before tf.writeTraceToFile(this.trace_output_folder, this.getClass().getSimpleName());
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
Before return "Success"
After handling {task=StopRuntimeEnv}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
After handling {task=DeployQueries, arguments=[{name=Valid Location Event, id=5, output-stream-id=17, type=fetch-query, sql-query={t-rex= Assign 16 => Traffic, 17 => ValidLocationEvent Define  ValidLocationEvent(ts: float, lane: int, id: int, road: int, speed: float, dist: float, segmentId: int) From   Traffic() Where ts := Traffic.t, lane := Traffic.lane, id := Traffic.id, road := Traffic.roadId, speed := Traffic.v, dist := Traffic.x, segmentId := Traffic.originId Consuming Traffic; , siddhi=from trafficRouteStream select id as id, t as ts, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId insert into ValidLocationEvent; , esper=insert into ValidLocationEvent select t.id as id, t.t as ts, t.roadId as road, t.v as speed, t.x as dist, t.lane as lane, t.originId as segmentId from trafficRouteStream t group by t.roadId; , flink=select id as id, eventTime as eventTime, roadId as road, v as speed, x as dist, lane as lane, originId as segmentId from trafficRouteStream }}]}
Before handling {task=EndExperiment, administrative=true, ack=false}
Trace output written to /home/espen/Research/PhD/Private-WIP/traces/flink/FlinkExperimentFramework-78249151657153-40aabde9-a599-4b81-ad51-96fbbd844983.trace
